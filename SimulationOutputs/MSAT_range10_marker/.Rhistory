gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
return(genind)
}
# WORKING: Generating a function that will convert all of the Arlequin files in a directory to genind
convertAllArp <- function(arp.path, params){
# browser()
# Retrieve original working directory, to reset to after conversion
original.WD <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Capture marker type, to pass onto the conversion command
fscMarker <- tolower(params$settings$genetics$fsc.type)
# Convert all Arlequin files to adegenet, creating a list of genind objects
for(i in 1:length(genind.list)){
# Move up one directory, in order for the fscReadArp command (withing strataG_arp2gen) to work
setwd("..")
genind.obj <- strataG_arp2gen(params, rep=i, marker=fscMarker)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.WD)
return(genind.list)
}
MSAT_01pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_01pop_migLow/"
MSAT_01pop_migLow_genind <- convertAllArp(arp.path = MSAT_01pop_migLow_arpPath,
params = MSAT_01pop_migLow.params)
getwd()
fscReadArp(params, sim=c(1,repNumber), marker = marker)
# WORKING: Generating a function that will convert all of the Arlequin files in a directory to genind
convertAllArp <- function(arp.path, params){
# browser()
# Retrieve original working directory, to reset to after conversion
original.WD <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Capture marker type, to pass onto the conversion command
fscMarker <- tolower(params$settings$genetics$fsc.type)
# Move up one directory, in order for the fscReadArp command (withing strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to adegenet, creating a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i, marker=fscMarker)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.WD)
return(genind.list)
}
MSAT_01pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_01pop_migLow/"
MSAT_01pop_migLow_genind <- convertAllArp(arp.path = MSAT_01pop_migLow_arpPath,
params = MSAT_01pop_migLow.params)
# Function converting Arlequin output to genind (through gtypes format)
strataG_arp2gen <- function(params, repNumber, marker){
# browser()
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
return(genind)
}
MSAT_01pop_migLow_genind <- convertAllArp(arp.path = MSAT_01pop_migLow_arpPath,
params = MSAT_01pop_migLow.params)
MSAT_01pop_migLow_genind
MSAT_01pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_01pop_migHigh/"
MSAT_01pop_migHigh_genind <- convertAllArp(arp.path = MSAT_01pop_migHigh_arpPath,
params = MSAT_01pop_migHigh.params)
MSAT_04pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_04pop_migLow/"
MSAT_04pop_migLow_genind <- convertAllArp(arp.path = MSAT_04pop_migLow_arpPath,
params = MSAT_04pop_migLow.params)
MSAT_04pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_04pop_migHigh/"
MSAT_04pop_migHigh_genind <- convertAllArp(arp.path = MSAT_04pop_migHigh_arpPath,
params = MSAT_04pop_migHigh.params)
MSAT_16pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_16pop_migLow/"
MSAT_16pop_migLow_genind <- convertAllArp(arp.path = MSAT_16pop_migLow_arpPath,
params = MSAT_16pop_migLow.params)
MSAT_16pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/MSAT_16pop_migHigh/"
MSAT_16pop_migHigh_genind <- convertAllArp(arp.path = MSAT_16pop_migHigh_arpPath,
params = MSAT_16pop_migHigh.params)
# Convert DNA Arlequin outputs ----
DNA_01pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_01pop_migLow/"
DNA_01pop_migLow_genind <- convertAllArp(arp.path = DNA_01pop_migLow_arpPath,
params = DNA_01pop_migLow.params)
DNA_01pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_01pop_migHigh/"
DNA_01pop_migHigh_genind <- convertAllArp(arp.path = DNA_01pop_migHigh_arpPath,
params = DNA_01pop_migHigh.params)
DNA_04pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_04pop_migLow/"
DNA_04pop_migLow_genind <- convertAllArp(arp.path = DNA_04pop_migLow_arpPath,
params = DNA_04pop_migLow.params)
DNA_04pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_04pop_migHigh/"
DNA_04pop_migHigh_genind <- convertAllArp(arp.path = DNA_04pop_migHigh_arpPath,
params = DNA_04pop_migHigh.params)
DNA_16pop_migLow_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_16pop_migLow/"
DNA_16pop_migLow_genind <- convertAllArp(arp.path = DNA_16pop_migLow_arpPath,
params = DNA_16pop_migLow.params)
DNA_16pop_migHigh_arpPath <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/DNA_marker/DNA_16pop_migHigh/"
DNA_16pop_migHigh_genind <- convertAllArp(arp.path = DNA_16pop_migHigh_arpPath,                                            params = DNA_16pop_migHigh.params)
# ---- SENSE CHECK ----
# 1. MORE ALLELES IN SCENARIOS WITH MORE POPULATIONS ----
# MSAT ----
mean(sapply(MSAT_01pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(MSAT_04pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(MSAT_16pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(MSAT_01pop_migHigh_genind, function(x) ncol(x@tab)))
mean(sapply(MSAT_04pop_migHigh_genind, function(x) ncol(x@tab)))
mean(sapply(MSAT_16pop_migHigh_genind, function(x) ncol(x@tab)))
# DNA ----
mean(sapply(DNA_01pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(DNA_04pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(DNA_16pop_migLow_genind, function(x) ncol(x@tab)))
mean(sapply(DNA_01pop_migHigh_genind, function(x) ncol(x@tab)))
mean(sapply(DNA_04pop_migHigh_genind, function(x) ncol(x@tab)))
mean(sapply(DNA_16pop_migHigh_genind, function(x) ncol(x@tab)))
# 2. LOWER FST FOR SCENARIO WITH LOWER MIGRATION RATES ----
# MSAT ----
sapply(MSAT_04pop_migLow_genind, function(x) mean(c(pairwise.neifst(genind2hierfstat(x))), na.rm=TRUE))
sapply(MSAT_04pop_migHigh_genind, function(x) mean(c(pairwise.neifst(genind2hierfstat(x))), na.rm=TRUE))
sapply(MSAT_16pop_migLow_genind, function(x) mean(c(pairwise.neifst(genind2hierfstat(x))), na.rm=TRUE))
sapply(MSAT_16pop_migHigh_genind, function(x) mean(c(pairwise.neifst(genind2hierfstat(x))), na.rm=TRUE))
# 3. ALLELE FREQUENCY SPECTRA ----
# QUESTION: when we calculate allele frequencies, do we divide my the number of individuals in the
# population? Or, in the entire species? Currently, doing the entire species...
# MSAT ----
MSAT_01pop_migLow_Freqs <- lapply(MSAT_01pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
MSAT_01pop_migHigh_Freqs <- lapply(MSAT_01pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
MSAT_04pop_migLow_Freqs <- lapply(MSAT_04pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
MSAT_04pop_migHigh_Freqs <- lapply(MSAT_04pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
MSAT_16pop_migLow_Freqs <- lapply(MSAT_16pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
MSAT_16pop_migHigh_Freqs <- lapply(MSAT_16pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
hist(MSAT_01pop_migLow_Freqs[[1]])
hist(MSAT_01pop_migLow_Freqs[[2]])
hist(MSAT_01pop_migLow_Freqs[[3]])
hist(MSAT_01pop_migLow_Freqs[[4]])
hist(MSAT_01pop_migLow_Freqs[[5]])
hist(MSAT_01pop_migHigh_Freqs[[1]])
hist(MSAT_01pop_migHigh_Freqs[[2]])
hist(MSAT_01pop_migHigh_Freqs[[3]])
hist(MSAT_01pop_migHigh_Freqs[[4]])
hist(MSAT_01pop_migHigh_Freqs[[5]])
hist(MSAT_04pop_migLow_Freqs[[1]])
hist(MSAT_04pop_migLow_Freqs[[2]])
hist(MSAT_04pop_migLow_Freqs[[3]])
hist(MSAT_04pop_migLow_Freqs[[4]])
hist(MSAT_04pop_migLow_Freqs[[5]])
hist(MSAT_04pop_migHigh_Freqs[[1]])
hist(MSAT_04pop_migHigh_Freqs[[2]])
hist(MSAT_04pop_migHigh_Freqs[[3]])
hist(MSAT_04pop_migHigh_Freqs[[4]])
hist(MSAT_04pop_migHigh_Freqs[[5]])
hist(MSAT_16pop_migLow_Freqs[[1]])
hist(MSAT_16pop_migLow_Freqs[[2]])
hist(MSAT_16pop_migLow_Freqs[[3]])
hist(MSAT_16pop_migLow_Freqs[[4]])
hist(MSAT_16pop_migLow_Freqs[[5]])
hist(MSAT_16pop_migHigh_Freqs[[1]])
hist(MSAT_16pop_migHigh_Freqs[[2]])
hist(MSAT_16pop_migHigh_Freqs[[3]])
hist(MSAT_16pop_migHigh_Freqs[[4]])
hist(MSAT_16pop_migHigh_Freqs[[5]])
# DNA ----
DNA_01pop_migLow_Freqs <- lapply(DNA_01pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
DNA_01pop_migHigh_Freqs <- lapply(DNA_01pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
DNA_04pop_migLow_Freqs <- lapply(DNA_04pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
DNA_04pop_migHigh_Freqs <- lapply(DNA_04pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
DNA_16pop_migLow_Freqs <- lapply(DNA_16pop_migLow_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
DNA_16pop_migHigh_Freqs <- lapply(DNA_16pop_migHigh_genind, function(x) colSums(x@tab, na.rm = TRUE)/(nInd*2)*100)
hist(DNA_01pop_migLow_Freqs[[1]])
hist(DNA_01pop_migLow_Freqs[[2]])
hist(DNA_01pop_migLow_Freqs[[3]])
hist(DNA_01pop_migLow_Freqs[[4]])
hist(DNA_01pop_migLow_Freqs[[5]])
hist(DNA_01pop_migHigh_Freqs[[1]])
hist(DNA_01pop_migHigh_Freqs[[2]])
hist(DNA_01pop_migHigh_Freqs[[3]])
hist(DNA_01pop_migHigh_Freqs[[4]])
hist(DNA_01pop_migHigh_Freqs[[5]])
hist(DNA_04pop_migLow_Freqs[[1]])
hist(DNA_04pop_migLow_Freqs[[2]])
hist(DNA_04pop_migLow_Freqs[[3]])
hist(DNA_04pop_migLow_Freqs[[4]])
hist(DNA_04pop_migLow_Freqs[[5]])
hist(DNA_04pop_migHigh_Freqs[[1]])
hist(DNA_04pop_migHigh_Freqs[[2]])
hist(DNA_04pop_migHigh_Freqs[[3]])
hist(DNA_04pop_migHigh_Freqs[[4]])
hist(DNA_04pop_migHigh_Freqs[[5]])
hist(DNA_16pop_migLow_Freqs[[1]])
hist(DNA_16pop_migLow_Freqs[[2]])
hist(DNA_16pop_migLow_Freqs[[3]])
hist(DNA_16pop_migLow_Freqs[[4]])
hist(DNA_16pop_migLow_Freqs[[5]])
hist(DNA_16pop_migHigh_Freqs[[1]])
hist(DNA_16pop_migHigh_Freqs[[2]])
hist(DNA_16pop_migHigh_Freqs[[3]])
hist(DNA_16pop_migHigh_Freqs[[4]])
hist(DNA_16pop_migHigh_Freqs[[5]])
MSAT_01pop_migLow.params
MSAT_01pop_migLow_genind[[1]]
MSAT_01pop_migLow_genind[[1]]@tab[1:5,1:5]
MSAT_01pop_migLow_genind[[1]]@tab[1:5,]
MSAT_01pop_migLow_genind[[1]]@tab[,1:5]
clr()
library(adegenet)
library(hierfstat)
library(stringr)
library(strataG)
# ANALYZE FSC OUTPUTS USING ARLEQUINREAD (SINGLE DNA LOCUS ISSUE) ----
setwd("/home/akoontz/Software/Simulations/fsc27_linux64/exampleFiles/")
sim.directory <- getwd()
# Specify 1PopDNA example directory to pull Arlequin outputs from
Example_1PopDNA_3 <- arlequinRead(paste0(sim.directory,"/DemoBroken_1PopDNA/DemoBroken_1PopDNA_1_3.arp"))
Example_1PopDNA_3 <- arp2gtypes(Example_1PopDNA_3)
Example_1PopDNA_3 <- gtypes2genind(Example_1PopDNA_3)
# Number of loci is one
nLoc(Example_1PopDNA_3)
# Locus is a long string of nucleotides (should be only 10 bp, but is 30 bp)
colnames(Example_1PopDNA_3@tab)[[1]]
# ANALYZE FSC OUTPUTS USING FSCREADARP (ISSUE SOLVED) ----
# Write deme parameters
Example_1Pop_Deme <- fscSettingsDemes(fscDeme(10000,5))
# Write genetics parameters
DNA_block <- fscBlock_dna(sequence.length = 10,mut.rate = 2e-4, transition.rate = 0.33)
Example_1Pop_DNA <- fscSettingsGenetics(DNA_block, DNA_block, DNA_block, num.chrom = 1)
# Create a fsc parameters file
Example_1PopDNA.params <- fscWrite(demes = Example_1Pop_Deme,
genetics = Example_1Pop_DNA,
label = "DemoFix_1PopDNA", use.wd=TRUE)
# Run Example_1PopDNA using strataG, and capture the parameters object output
Example_1PopDNA.params <- fscRun(Example_1PopDNA.params, num.sims = 5,
all.sites = TRUE, exec = "fsc2709")
# ---- FUNCTIONS ----
# Function converting Arlequin output to genind (through gtypes format)
strataG_arp2gen <- function(params, repNumber, marker){
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
return(genind)
}
# Function for converting all of the Arlequin files in a directory to genind, generating a genind list
convertAllArp <- function(arp.path, params){
# Retrieve original working directory, to reset to after conversion
original.WD <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Capture marker type, to pass onto the conversion command
fscMarker <- tolower(params$settings$genetics$fsc.type)
# Move up one directory, in order for the fscReadArp command (within strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to adegenet, creating a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i, marker=fscMarker)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.WD)
return(genind.list)
}
list.files()
getwd()
Example_1PopDNA_arpPath <- "/home/akoontz/Software/Simulations/fsc27_linux64/exampleFiles/DemoFix_1PopDNA/"
Example_1PopDNA_genind <- convertAllArp(arp.path = Example_1PopDNA_arpPath, params=Example_1PopDNA.params)
# Number of loci is one
nLoc(Example_1PopDNA_genind[[1]])
# Locus is an extremely long string of nucleotides
colnames(Example_1PopDNA_genind[[1]]@tab)[[1]]
# Locus is an extremely long string of nucleotides
colnames(Example_1PopDNA_genind[[1]]@tab)[,1:3]
# Locus is an extremely long string of nucleotides
colnames(Example_1PopDNA_genind[[1]]@tab)[1:3]
fscTutorial
fscTutorial()
# Test from fscTutorial
param.df <- data.frame(
N = 10 ^ runif(5, 2, 4),
MIG = 10 ^ runif(5, -8, -5)
)
param.df
getwd()
param.p <- lapply(1:nrow(param.df), function(i) {
N <- param.df$N[i]
MIG <- param.df$MIG[i]
p <- fscWrite(
demes = fscSettingsDemes(fscDeme(N, 5), fscDeme(N, 5)),
migration = fscSettingsMigration(matrix(c(0, MIG, MIG, 0), nrow = 2)),
genetics = fscSettingsGenetics(fscBlock_snp(100, 1e-6), num.chrom = 1000),
label = paste0("param.sim.", i)
)
fscRun(p)
})
param.p
str(param.p)
param.df
clr()
library(strataG)
library(adegenet)
library(stringr)
library(hierfstat)
setwd("~/Documents/SSRvSNP/Simulations/Code/fscParams/")
# ---- FUNCTIONS ----
# Function converting Arlequin output to genind (through gtypes format)
strataG_arp2gen <- function(params, repNumber, marker){
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
return(genind)
}
# Function for converting all of the Arlequin files in a directory to genind, generating a genind list
convertAllArp <- function(arp.path, params){
# Retrieve original working directory, to reset to after conversion
original.WD <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Capture marker type, to pass onto the conversion command
fscMarker <- tolower(params$settings$genetics$fsc.type)
# Move up one directory, in order for the fscReadArp command (within strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to adegenet, creating a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i, marker=fscMarker)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.WD)
return(genind.list)
}
# ---- VARIABLES ----
num_reps <- 5
fscVersion <- "fsc2709"
# DEMES
# Specify number of total individuals, for all simulations
# Since there are 4 deme and 16 deme scenarios, this value must be divisible by 4 and 16
nInd <- 1200
# 1 Population
demeA <- fscDeme(deme.size = nInd, sample.size = nInd)
demes1 <- fscSettingsDemes(demeA)
demeB <- fscDeme(deme.size = nInd/4, sample.size = nInd/4)
demes4 <- fscSettingsDemes(demeB, demeB, demeB, demeB)
# MIGRATION
low_mig <- 0.001
high_mig <- 0.01
mig.mat.4.Low <- matrix(low_mig, nrow=4, ncol = 4); diag(mig.mat.4.Low) <- 0
mig.mat.4.High <- matrix(high_mig, nrow=4, ncol = 4); diag(mig.mat.4.High) <- 0
mig.mat.4.Final <- matrix(0, nrow=4, ncol = 4)
mig4Low <- fscSettingsMigration(mig.mat.4.Low, mig.mat.4.Final)
mig4High <- fscSettingsMigration(mig.mat.4.High, mig.mat.4.Final)
mig.mat.16.Low <- matrix(low_mig, nrow=16, ncol = 16); diag(mig.mat.16.Low) <- 0
mig.mat.16.High <- matrix(high_mig, nrow=16, ncol = 16); diag(mig.mat.16.High) <- 0
mig.mat.16.Final <- matrix(0, nrow=16, ncol = 16)
mig16Low <- fscSettingsMigration(mig.mat.16.Low, mig.mat.16.Final)
mig16High <- fscSettingsMigration(mig.mat.16.High, mig.mat.16.Final)
# Historical events
hist.event0 <- fscEvent(event.time = 50000, source = 0, sink = 0, prop.migrants = 0, migr.mat = 1)
hist.event1 <- fscEvent(event.time = 50000, source = 1, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event2 <- fscEvent(event.time = 50000, source = 2, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event3 <- fscEvent(event.time = 50000, source = 3, sink = 0, prop.migrants = 1, migr.mat = 1)
histEvent4 <- fscSettingsEvents(hist.event0, hist.event1, hist.event2, hist.event3)
hist.event4 <- fscEvent(event.time = 50000, source = 4, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event5 <- fscEvent(event.time = 50000, source = 5, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event6 <- fscEvent(event.time = 50000, source = 6, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event7 <- fscEvent(event.time = 50000, source = 7, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event8 <- fscEvent(event.time = 50000, source = 8, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event9 <- fscEvent(event.time = 50000, source = 9, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event10 <- fscEvent(event.time = 50000, source = 10, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event11 <- fscEvent(event.time = 50000, source = 11, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event12 <- fscEvent(event.time = 50000, source = 12, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event13 <- fscEvent(event.time = 50000, source = 13, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event14 <- fscEvent(event.time = 50000, source = 14, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event15 <- fscEvent(event.time = 50000, source = 15, sink = 0, prop.migrants = 1, migr.mat = 1)
histEvent16 <- fscSettingsEvents(hist.event0,hist.event1,hist.event2,hist.event3,hist.event4,hist.event5,hist.event6,hist.event7,
hist.event8,hist.event9,hist.event10,hist.event11,hist.event12,hist.event13,hist.event14,hist.event15)
# MSAT Genetic parameters
msats <- fscBlock_microsat(num.loci = 1, mut.rate = 5e-4, range.constraint = 10)
MSATgenetics <- fscSettingsGenetics(msats, num.chrom = 20)
# DNA Genetic parameters
dna <- fscBlock_dna(sequence.length = 25, mut.rate = 1e-5)
DNAgenetics <- fscSettingsGenetics(dna, dna, dna, dna, num.chrom = 5)
# ---- MICROSATELLITE SIMULATIONS ----
setwd("~/Documents/SSRvSNP/Simulations/Code/fscParams/MSAT_marker/")
# 4 POPULATIONS ----
# Write parameter files
MSAT_04pop_migLow.params <- fscWrite(demes = demes4, migration = mig4Low, events = histEvent4,
genetics = MSATgenetics, label = "MSAT_04pop_migLow", use.wd=TRUE)
MSAT_04pop_migHigh.params <- fscWrite(demes = demes4, migration = mig4High, events = histEvent4,
genetics = MSATgenetics, label = "MSAT_04pop_migHigh", use.wd=TRUE)
# Run parameter files
MSAT_04pop_migLow.params <- fscRun(MSAT_04pop_migLow.params, num.sims = num_reps, exec = fscVersion)
MSAT_04pop_migHigh.params <- fscRun(MSAT_04pop_migHigh.params, num.sims = num_reps, exec = fscVersion)
# 4 Populations
demeB_1 <- fscDeme(deme.size = nInd/4, sample.size = nInd/4)
rep(demeC,16)
# 16 Populations
demeC <- fscDeme(deme.size = nInd/16, sample.size = nInd/16)
rep(demeC,16)
demes16 <- fscSettingsDemes(demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,
demeC,demeC,demeC,demeC)
demes16_TEST <- fscSettingsDemes(rep(demeC,16))
demes16_TEST <- fscSettingsDemes(rep(fscDeme(deme.size = nInd/16, sample.size = nInd/16),16))
clr()
sim.wd <- "~/Documents/SSRvSNP/Simulations/Code/fscParams/"
setwd(sim.wd)
# ---- FUNCTIONS ----
# Function converting Arlequin output to genind (through gtypes format)
strataG_arp2gen <- function(params, repNumber, marker){
# Read in the Arlequin file, convert it to a gtype object, then to a genind object
arp <- fscReadArp(params, sim=c(1,repNumber), marker = marker)
gtype <- df2gtypes(arp, ploidy = 2)
genind <- gtypes2genind(gtype)
return(genind)
}
# Function for converting all of the Arlequin files in a directory to genind, generating a genind list
convertAllArp <- function(arp.path, params){
# Retrieve original working directory, to reset to after conversion
original.WD <- getwd()
# Navigate to the folder containing simulation outputs
setwd(arp.path)
# Create an empty list object to receive list of genind.
# The length of this list is the number of replicates, which is specified as a numeric vector
genind.list <- vector("list",length=length(dir()[str_detect(dir(), pattern = ".arp")]))
fscReps <- seq(1, length(genind.list))
# Capture marker type, to pass onto the conversion command
fscMarker <- tolower(params$settings$genetics$fsc.type)
# Move up one directory, in order for the fscReadArp command (within strataG_arp2gen) to work
setwd("..")
# Convert all Arlequin files to adegenet, creating a list of genind objects
for(i in 1:length(genind.list)){
genind.obj <- strataG_arp2gen(params, rep=i, marker=fscMarker)
genind.list[[i]] <- genind.obj
}
# Reset to original working directory, and return a list of genind objects
setwd(original.WD)
return(genind.list)
}
# ---- VARIABLES ----
num_reps <- 5
fscVersion <- "fsc2709"
# DEMES
# Specify number of total individuals, for all simulations
# Since there are 4 deme and 16 deme scenarios, this value must be divisible by 4 and 16
nInd <- 1200
# 1 Population
demeA <- fscDeme(deme.size = nInd, sample.size = nInd)
demes1 <- fscSettingsDemes(demeA)
# 4 Populations
demeB <- fscDeme(deme.size = nInd/4, sample.size = nInd/4)
demes4 <- fscSettingsDemes(demeB, demeB, demeB, demeB)
# 16 Populations
demeC <- fscDeme(deme.size = nInd/16, sample.size = nInd/16)
demes16 <- fscSettingsDemes(demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,demeC,
demeC,demeC,demeC,demeC)
# MIGRATION
low_mig <- 0.001
high_mig <- 0.01
mig.mat.4.Low <- matrix(low_mig, nrow=4, ncol = 4); diag(mig.mat.4.Low) <- 0
mig.mat.4.High <- matrix(high_mig, nrow=4, ncol = 4); diag(mig.mat.4.High) <- 0
mig.mat.4.Final <- matrix(0, nrow=4, ncol = 4)
mig4Low <- fscSettingsMigration(mig.mat.4.Low, mig.mat.4.Final)
mig4High <- fscSettingsMigration(mig.mat.4.High, mig.mat.4.Final)
mig.mat.16.Low <- matrix(low_mig, nrow=16, ncol = 16); diag(mig.mat.16.Low) <- 0
mig.mat.16.High <- matrix(high_mig, nrow=16, ncol = 16); diag(mig.mat.16.High) <- 0
mig.mat.16.Final <- matrix(0, nrow=16, ncol = 16)
mig16Low <- fscSettingsMigration(mig.mat.16.Low, mig.mat.16.Final)
mig16High <- fscSettingsMigration(mig.mat.16.High, mig.mat.16.Final)
# Historical events
hist.event0 <- fscEvent(event.time = 50000, source = 0, sink = 0, prop.migrants = 0, migr.mat = 1)
hist.event1 <- fscEvent(event.time = 50000, source = 1, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event2 <- fscEvent(event.time = 50000, source = 2, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event3 <- fscEvent(event.time = 50000, source = 3, sink = 0, prop.migrants = 1, migr.mat = 1)
histEvent4 <- fscSettingsEvents(hist.event0, hist.event1, hist.event2, hist.event3)
hist.event4 <- fscEvent(event.time = 50000, source = 4, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event5 <- fscEvent(event.time = 50000, source = 5, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event6 <- fscEvent(event.time = 50000, source = 6, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event7 <- fscEvent(event.time = 50000, source = 7, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event8 <- fscEvent(event.time = 50000, source = 8, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event9 <- fscEvent(event.time = 50000, source = 9, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event10 <- fscEvent(event.time = 50000, source = 10, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event11 <- fscEvent(event.time = 50000, source = 11, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event12 <- fscEvent(event.time = 50000, source = 12, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event13 <- fscEvent(event.time = 50000, source = 13, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event14 <- fscEvent(event.time = 50000, source = 14, sink = 0, prop.migrants = 1, migr.mat = 1)
hist.event15 <- fscEvent(event.time = 50000, source = 15, sink = 0, prop.migrants = 1, migr.mat = 1)
histEvent16 <- fscSettingsEvents(hist.event0,hist.event1,hist.event2,hist.event3,hist.event4,hist.event5,hist.event6,
hist.event7,hist.event8,hist.event9,hist.event10,hist.event11,hist.event12,
hist.event13,hist.event14,hist.event15)
# MSAT Genetic parameters
msats <- fscBlock_microsat(num.loci = 1, mut.rate = 5e-4, range.constraint = 10)
MSATgenetics <- fscSettingsGenetics(msats, num.chrom = 20)
# DNA Genetic parameters
dna <- fscBlock_dna(sequence.length = 25, mut.rate = 1e-5)
DNAgenetics <- fscSettingsGenetics(dna, dna, dna, dna, num.chrom = 5)
setwd(paste(sim.wd,"MSAT_marker"))
getwd()
setwd(paste0(sim.wd,"MSAT_marker"))
getwd()
paste0(sim.wd,"MSAT_marker/MSAT_01pop_migLow/")
